---
- block:
    - name: Delete the Operator Deployment
      k8s:
        state: absent
        namespace: '{{ namespace }}'
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) }}"
      register: delete_deployment
      when: hostvars[groups.k8s.0].build_cmd.changed

    - name: Wait 30s for Operator Deployment to terminate
      k8s_info:
        api_version: '{{ definition.apiVersion }}'
        kind: '{{ definition.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ definition.metadata.name }}'
      vars:
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) | from_yaml }}"
      register: deployment
      until: not deployment.resources
      delay: 3
      retries: 10
      when: delete_deployment.changed

    - name: Create the Operator Deployment
      k8s:
        namespace: '{{ namespace }}'
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) }}"

    - name: Create required custom resources
      k8s:
        state: present
        namespace: '{{ namespace }}'
        definition: '{{ custom_resource }}'


    - name: Wait 5m for reconciliation to run
      k8s_info:
        api_version: '{{ custom_resource.apiVersion }}'
        kind: '{{ custom_resource.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ custom_resource.metadata.name }}'
      register: cr
      until:
        - "'Successful' in (cr | json_query('resources[].status.conditions[].reason'))"
      delay: 10
      retries: 30
  rescue:
    - name: debug cr
      ignore_errors: true
      failed_when: false
      debug:
        var: debug_cr
      vars:
        debug_cr: '{{ lookup("k8s",
          kind=custom_resource.kind,
          api_version=custom_resource.apiVersion,
          namespace=namespace,
          resource_name=custom_resource.metadata.name
        )}}'

    - name: debug mbs-backend lookup
      ignore_errors: true
      failed_when: false
      debug:
        var: deploy
      vars:
        deploy: '{{ lookup("k8s",
          kind="Deployment",
          api_version="apps/v1",
          namespace=namespace,
          label_selector="app=mbs-backend"
        )}}'

    - name: get sdk operator logs
      ignore_errors: true
      failed_when: false
      command: kubectl logs `kubectl get pod --selector name=mbox-operator -o jsonpath='{.items[0].metadata.name}'` operator -n {{ namespace }}
      environment:
        KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
      vars:
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) | from_yaml }}"
      register: log

    - debug: var=log.stdout_lines

    - name: get ansible operator logs
      ignore_errors: true
      failed_when: false
      command: kubectl logs `kubectl get pod --selector name=mbox-operator -o jsonpath='{.items[0].metadata.name}'` ansible -n {{ namespace }}
      environment:
        KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
      vars:
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) | from_yaml }}"
      register: log

    - debug: var=log.stdout_lines

    - name: get ansible mbs-backend logs
      ignore_errors: true
      failed_when: false
      command: kubectl logs `kubectl get pod --selector name=mbs-backend -o jsonpath='{.items[0].metadata.name}'` ansible -n {{ namespace }}
      environment:
        KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
      vars:
        definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml.j2'])) | from_yaml }}"
      register: log

    - debug: var=log.stdout_lines

    - fail:
        msg: "Failed on action: converge"
